{"ast":null,"code":"import _Box from \"@material-ui/core/Box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/apple/Desktop/mydir/projects/personal/spidy/fe_2/spidy_fe/app/components/layout/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect } from 'react';\nimport { element } from 'prop-types';\nimport Header from '../header';\nimport Footer from '../footer';\nimport { GlobalContext } from '../../../pages/_app';\nimport { SERVICE_LIST, GROUPS_LIST, CATEGORY_LIST } from '../../lib/utility/type';\nimport { subCatServic } from '../../lib/services/home';\nimport LoadingBar from '../loading';\n\nconst Layout = ({\n  children\n}) => {\n  const globalContext = useContext(GlobalContext);\n  useEffect(async () => {\n    await subCatService().then(cdata => {\n      const tempArr = [];\n      let tempArr2 = [];\n      let tempObj = {};\n      let tempGid = {};\n      cdata.data.map(eachData => {\n        if (eachData.sub_category && eachData.icon_url) {\n          tempArr2 = [];\n          eachData.service.map(serviceData => {\n            tempArr2.push({\n              id: serviceData._id,\n              label: serviceData.service\n            });\n          });\n          tempObj = _objectSpread({\n            [eachData._id]: tempArr2\n          }, tempObj);\n          tempGid = _objectSpread({\n            [eachData._id]: eachData.group_id\n          }, tempGid);\n          tempArr.push({\n            id: eachData._id,\n            label: eachData.sub_category,\n            icon_url: eachData.icon_url,\n            bannerUrl: eachData.banner_url\n          });\n        }\n      });\n      globalContext.allDispatch({\n        type: CATEGORY_LIST,\n        value: tempArr\n      });\n      globalContext.allDispatch({\n        type: SERVICE_LIST,\n        value: tempObj\n      });\n      globalContext.allDispatch({\n        type: GROUPS_LIST,\n        value: tempGid\n      });\n    }); // if(!socket){\n    //     socket = io.connect('http://localhost:8080');\n    // }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Box, {\n    id: \"new\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), children, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), globalContext.state.loadingBarStatus ? /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 47\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\nLayout.defaultProps = {};\nLayout.propTypes = {\n  children: element\n};\nexport default Layout;","map":{"version":3,"sources":["/Users/apple/Desktop/mydir/projects/personal/spidy/fe_2/spidy_fe/app/components/layout/index.js"],"names":["React","useContext","useEffect","element","Header","Footer","GlobalContext","SERVICE_LIST","GROUPS_LIST","CATEGORY_LIST","subCatServic","LoadingBar","Layout","children","globalContext","subCatService","then","cdata","tempArr","tempArr2","tempObj","tempGid","data","map","eachData","sub_category","icon_url","service","serviceData","push","id","_id","label","group_id","bannerUrl","banner_url","allDispatch","type","value","state","loadingBarStatus","defaultProps","propTypes"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { element } from 'prop-types';\r\nimport { Box } from '@material-ui/core';\r\nimport Header from '../header';\r\nimport Footer from '../footer';\r\nimport { GlobalContext } from '../../../pages/_app';\r\nimport {\r\n  SERVICE_LIST,\r\n  GROUPS_LIST,\r\n  CATEGORY_LIST,\r\n} from '../../lib/utility/type';\r\nimport { subCatServic } from '../../lib/services/home';\r\nimport LoadingBar from '../loading';\r\n\r\nconst Layout = ({ children }) => {\r\n  const globalContext = useContext(GlobalContext);\r\n\r\n  useEffect(async () => {\r\n    await subCatService().then((cdata) => {\r\n      const tempArr = [];\r\n      let tempArr2 = [];\r\n      let tempObj = {};\r\n      let tempGid = {};\r\n      cdata.data.map((eachData) => {\r\n        if (eachData.sub_category && eachData.icon_url) {\r\n          tempArr2 = [];\r\n          eachData.service.map((serviceData) => {\r\n            tempArr2.push({ id: serviceData._id, label: serviceData.service });\r\n          });\r\n          tempObj = { [eachData._id]: tempArr2, ...tempObj };\r\n          tempGid = { [eachData._id]: eachData.group_id, ...tempGid };\r\n          tempArr.push({\r\n            id: eachData._id,\r\n            label: eachData.sub_category,\r\n            icon_url: eachData.icon_url,\r\n            bannerUrl: eachData.banner_url,\r\n          });\r\n        }\r\n      });\r\n\r\n      globalContext.allDispatch({\r\n        type: CATEGORY_LIST,\r\n        value: tempArr,\r\n      });\r\n      globalContext.allDispatch({\r\n        type: SERVICE_LIST,\r\n        value: tempObj,\r\n      });\r\n      globalContext.allDispatch({\r\n        type: GROUPS_LIST,\r\n        value: tempGid,\r\n      });\r\n    });\r\n    // if(!socket){\r\n    //     socket = io.connect('http://localhost:8080');\r\n    // }\r\n  }, []);\r\n\r\n  return (\r\n    <Box id=\"new\">\r\n      <Header />\r\n      {children}\r\n      <Footer />\r\n\r\n      {globalContext.state.loadingBarStatus ? <LoadingBar /> : null}\r\n    </Box>\r\n  );\r\n};\r\n\r\nLayout.defaultProps = {};\r\n\r\nLayout.propTypes = {\r\n  children: element,\r\n};\r\n\r\nexport default Layout;\r\n"]},"metadata":{},"sourceType":"module"}